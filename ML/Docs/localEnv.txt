//////////////////////////////////////////////////////////////////////////
// 'localEnv.js' Documentation
// Author: Pedro Rivera priver3@lsu.edu
//
// Description:
//   This node js script recieves and executes python scripts from 
//   client.js. Once the tensorflow model has been trained the generated
//   .h5 file will be sent back to the server.
//
// update:
//   this is the first version 
//////////////////////////////////////////////////////////////////////////
Setup <assuming linux environment>:

nvidiaGPU driver (version must be >= 384.x)
  .runfile can be found at: https://www.nvidia.com/Download/index.aspx?lang=en-us

Docker to create and run docker images
  official guide found at: https://docs.docker.com/install/linux/docker-ce/ubuntu/

NodeJs to run .js files
  to install npm (node package manager): $ sudo apt-get install npm
  to install node: $ npm install node
//////////////////////////////////////////////////////////////////////////
How to use:
  start node script: $ node localEnv.js --(provider or validator)
  end node script:   cltr+c

//////////////////////////////////////////////////////////////////////////
Design explanation

<Script Functions>
run a tensorflow docker image with the the docker tag, python file, and number of gpus

TODO:make sure that the python file does not incude harmful libraries
TODO:reformat to be more automated


<Event Functions>
watch for changes within the current folder
create a new emitter if there currently is not one or a new one is needed
  due to a duplication feature within fs, all the events will execute once 
wait for a python file to be recieved
if a provider 
  then wait for a python file
  pass the python file to train.py
  read the generated json file
  run the generated python file
  zip the results and generated files 
  delete the generated files
if a validator
  then wait for a zip file
  unzip the data
  run the evaluation script
  send the results from training and evaluation to comp.py
  zip model and the txt file from comp.py
  delete the extra files generated and files from the zip folder
reset the values and mark the emitter to be regenerated

//////////////////////////////////////////////////////////////////////////
Script function:

function run
  exec execute a tensorflow docker image on the file
    if error is not 0 then
      log the error 
      end the script
    log the output


function genFiles
  if provider
    execute train.py with the file to be run
  else //assume this means it is a validator
    unzip the zip file 


function comp
  if you are a validator
    run comp.py to generate the comparison text file

function rem
  if provider
    zip reslut.h5 result.txt eval.py version.json into result.zip
    remove reslut.h5 result.txt eval.py version.json execute.py and the python file
  if validator
    zip result.h5 fin.txt into fin.zip
    remove result.h5 fin.txt eval.txt version.json eval.py  and the zip file
//////////////////////////////////////////////////////////////////////////
Event functions:

function genEmit
  emitter <- new instance of an eventEmitter
  emitter.on the first event call 'getFile' execute
    name <- fname 
  emitter.on the first event call 'getJson' execute
    obj <- JSON.parse(contents of the 'ver.json' at the given path)
    version <- obj.ver
    gpuCount <- obj.gpuCount
  emitter.on any call to the event 'runProg' execute
    call run
  emitter.on any call to the event 'resetVal' execute
    version <- ''
    name <- ''
    f <- 0
  return emitter


function runEmits
  call emit on the emitter with the event runProg and pass version and name
  call emit on the emitter with the event resetVal
  f <- 0


if provider
  fs.watch the current folder
    if f is 0
      emit<-genEmit
      f <- 1
    if the event is change and the name of the file ends in .py and file is not execute.py and the file is not  eval.py
      call genFiles(the file)
    if  the name of the file is execute.py and the name is '' 
      call emit on the emitter with the event getFile and pass the path to the file
    if  the name of the file is ver.json and the version is '' 
      call emit on the emitter with the event getJson and pass the path to the file
    if the event is change and the name is result.txt 
      call rem()
    if the version is not '' and the name is not ''
      call setTimeout and pass the function runEmits and the number 1000 (this is one second)
if validator
  fs.watch the current folder
    if f is 0
      emit<-genEmit
      f <- 1
    if the event is change and the name of the file is result.zip
      call genFiles(the file)
    if  the name of the file is eval.py and the name is '' 
      call emit on the emitter with the event getFile and pass the path to the file
    if  the name of the file is version.json and the version is '' 
      call emit on the emitter with the event getJson and pass the path to the file
    if the event is change and the name is eval.txt
      call comp()
    if the event is change and the name is fin.txt 
      call rem()
    if the version is not '' and the name is not ''
      call setTimeout and pass the function runEmits and the number 1000 (this is one second)
//////////////////////////////////////////////////////////////////////////
