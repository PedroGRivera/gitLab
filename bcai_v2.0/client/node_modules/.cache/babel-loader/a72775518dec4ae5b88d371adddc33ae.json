{"ast":null,"code":"import _regeneratorRuntime from \"/home/taurus/blockchain/gitLab/bcai_v2.0/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/taurus/blockchain/gitLab/bcai_v2.0/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/taurus/blockchain/gitLab/bcai_v2.0/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/taurus/blockchain/gitLab/bcai_v2.0/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/taurus/blockchain/gitLab/bcai_v2.0/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/taurus/blockchain/gitLab/bcai_v2.0/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/taurus/blockchain/gitLab/bcai_v2.0/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/taurus/blockchain/gitLab/bcai_v2.0/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/taurus/blockchain/gitLab/bcai_v2.0/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport TaskContract from \"./contracts/TaskContract.json\";\nimport getWeb3 from \"./utils/getWeb3\";\nimport truffleContract from \"truffle-contract\";\nimport ipfs from './ipfs';\nimport \"./App.css\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      web3: null,\n      accounts: null,\n      myContract: null,\n      debug: false,\n      providerCount: 0,\n      pendingCount: 0,\n      validatingCount: 0,\n      providingCount: 0\n    };\n    _this.componentWillMount =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var web3, accounts, Contract, instance;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return getWeb3();\n\n            case 3:\n              web3 = _context.sent;\n              _context.next = 6;\n              return web3.eth.getAccounts();\n\n            case 6:\n              accounts = _context.sent;\n              //console.log(accounts);\n              // Get the contract instance.\n              Contract = truffleContract(TaskContract);\n              Contract.setProvider(web3.currentProvider);\n              _context.next = 11;\n              return Contract.deployed();\n\n            case 11:\n              instance = _context.sent;\n\n              //console.log(instance);\n              // Set web3, accounts, and contract to the state, and then proceed with an\n              // example of interacting with the contract's methods.\n              _this.setState({\n                web3: web3,\n                accounts: accounts,\n                myContract: instance\n              });\n\n              console.log(\"contract setted up!\");\n\n              _this.showPools();\n\n              _context.next = 21;\n              break;\n\n            case 17:\n              _context.prev = 17;\n              _context.t0 = _context[\"catch\"](0);\n              // Catch any errors for any of the above operations.\n              alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n              console.log(_context.t0);\n\n            case 21:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[0, 17]]);\n    }));\n    _this.state = {};\n    _this.captureFile = _this.captureFile.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onSubmit = _this.onSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.showPools = _this.showPools.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.ListoutPool = _this.ListoutPool.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.DisplayNonZeroInList = _this.DisplayNonZeroInList.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.setState = _this.setState.bind(_assertThisInitialized(_assertThisInitialized(_this))).bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"captureFile\",\n    // runExample = async () => {\n    //   const { accounts, contract } = this.state;\n    //   // Stores a given value, 5 by default.\n    //   await contract.set(1721241, { from: accounts[2] });\n    //   // Get the value from the contract to prove it worked.\n    //   const response = await contract.get();\n    //   // Update state with the result.\n    //   this.setState({ storageValue: response.toNumber() });\n    // };\n    //file readers: https://developer.mozilla.org/en-US/docs/Web/API/FileReader\n    value: function captureFile(event) {\n      var _this2 = this;\n\n      console.log(\"capture file\");\n      event.preventDefault();\n      var file = event.target.files[0];\n      var reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = function () {\n        _this2.setState({\n          buffer: Buffer(reader.result)\n        });\n\n        console.log(\"buffer\", _this2.state.buffer);\n      };\n    }\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(event) {\n      var _this3 = this;\n\n      console.log(\"submitted!\");\n      event.preventDefault();\n      ipfs.files.add(this.state.buffer, function (err, result) {\n        if (err) {\n          console.log(\"Error!\", err);\n          return;\n        } else {\n          //this.setState({ipfsHash: result[0].hash})\n          console.log(\"ipfsHash returned\", result[0].hash);\n          return _this3.state.myContract.set(result[0].hash, {\n            from: _this3.state.accounts[0]\n          }).then(function (res) {\n            console.log(\"Send\", res);\n            return _this3.state.myContract.get.call({\n              from: _this3.state.accounts[0]\n            }).then(function (ipfsHash) {\n              console.log(\"Fetched\", ipfsHash);\n\n              _this3.setState({\n                ipfsHash: ipfsHash\n              });\n            });\n          });\n        }\n      });\n    }\n  }, {\n    key: \"showPools\",\n    value: function showPools() {\n      //optional [--list] \n      //NOTE: the following 'return' is important, it actually return the promise object\n      //this avoid the issue of unhandled promise.\n      var provPool = this.state.myContract.getProviderPool.call();\n      console.log(\"=======================================================\");\n      console.log(\"Active provider pool: Total = \", provPool.length);\n      console.log(provPool);\n      this.setState({\n        providerCount: provPool.length\n      });\n      return provPool;\n      /* }).then(function(provPool){\n         if(provPool.length >0) return this.ListoutPool(provPool,'provider');\n      //}).then(function(){\n      })\n      this.state.myContract.getPendingPool.call().then(function(reqPool){\n          console.log(\"=======================================================\")\n          console.log(\"Pending pool:  Total = \", reqPool.length);\n          console.log(reqPool);\n          this.setState({pendingCount: reqPool.length})\n          return reqPool;\n      //  })\n      }).then(function(reqPool){\n         if(reqPool.length>0) return this.ListoutPool(reqPool, 'request');\n      })//.then(function(){\n        this.state.myContract.getProvidingPool.call().then(function(providingPool){\n          console.log(\"=======================================================\")\n          console.log(\"Providing pool:  Total = \", providingPool.length);\n          console.log(providingPool);\n          this.setState({providingCount: providingPool.length})\n          return providingPool;\n        //})\n      }).then(function(providingPool){\n        if(providingPool.length>0) return this.ListoutPool(providingPool, 'request');\n      })//.then(function(){\n        this.state.myContract.getValidatingPool.call().then(function(valiPool){\n          console.log(\"=======================================================\")\n          console.log(\"Validating pool:  Total = \", valiPool.length);\n          console.log(valiPool);\n          this.setState({validatingCount: valiPool.length})\n          return valiPool;\n          //})\n      }).catch(console.log)\n      // .then(function(valiPool){\n      //   if(valiPool.length>0) return this.ListoutPool(valiPool, 'request');\n      // })\n      */\n    }\n  }, {\n    key: \"ListoutPool\",\n    value: function ListoutPool(Pool, type) {\n      //--list [--debug]\n      //console.log(\"List out Pool\")\n      if (type === 'provider') {\n        return this.state.myContract.listProviders.call(Pool).then(function (proList) {\n          console.log(\"-----------------------------------------------------\");\n          this.DisplayNonZeroInList(proList, 'provider');\n        });\n      } else if (type === 'request') {\n        return this.state.myContract.listRequests.call(Pool).then(function (pendList) {\n          console.log(\"-----------------------------------------------------\");\n          this.DisplayNonZeroInList(pendList, 'request');\n        });\n      } else throw new Text(\"Not supported type!\");\n    }\n  }, {\n    key: \"DisplayNonZeroInList\",\n    value: function DisplayNonZeroInList(List, type) {\n      if (type === 'request') for (var i = 0; i < List.length; i++) {\n        if (List[i]['addr'] !== 0) {\n          if (this.state.debug) {\n            console.log(List[i]);\n            console.log(\"-----------------------------------------------------\");\n          } else {\n            //simple print:\n            console.log(\"reqID = \", List[i]['reqID']);\n            console.log(\"addr = \", List[i]['addr']);\n            console.log(\"provider = \", List[i]['provider']);\n            console.log(\"status = \", List[i]['status']);\n            console.log(\"-----------------------------------------------------\");\n          }\n        }\n      } else if (type === 'provider') for (var j = 0; j < List.length; j++) {\n        if (List[j]['addr'] !== 0) {\n          if (this.state.debug) {\n            console.log(List[j]);\n            console.log(\"-----------------------------------------------------\");\n          } else {\n            console.log(\"provD = \", List[j]['provID']);\n            console.log(\"addr = \", List[j]['addr']);\n            console.log(\"available = \", List[j]['available']);\n            console.log(\"-----------------------------------------------------\");\n          }\n        }\n      } else throw new Text('Not supported type for display');\n    } //components of react: https://reactjs.org/docs/forms.html\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (!this.state.web3) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 224\n          },\n          __self: this\n        }, \"Loading Web3, accounts, and contract...\");\n      }\n\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, \"Your Mode: User\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }, \"You can change mode later.\"), React.createElement(\"img\", {\n        src: \"https://ipfs.infura.io/ipfs/\".concat(this.state.ipfsHash),\n        alt: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }, \"Upload Task Script\"), React.createElement(\"form\", {\n        onSubmit: this.onSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"file\",\n        onChange: this.captureFile,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"Click\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      })), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }, \"Your account: \", this.state.accounts[0]), React.createElement(\"button\", {\n        onClick: this.showPools,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240\n        },\n        __self: this\n      }, \"Refresh\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }, \"Active Provider = \", this.state.providerCount), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }, \"PendingPool =\", this.state.pendingCount), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }, \"Providing Pool = \", this.state.providingCount), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }, \"Validating Pool = \", this.state.validatingCount)));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/taurus/blockchain/gitLab/bcai_v2.0/client/src/App.js"],"names":["React","Component","TaskContract","getWeb3","truffleContract","ipfs","App","props","state","web3","accounts","myContract","debug","providerCount","pendingCount","validatingCount","providingCount","componentWillMount","eth","getAccounts","Contract","setProvider","currentProvider","deployed","instance","setState","console","log","showPools","alert","captureFile","bind","onSubmit","ListoutPool","DisplayNonZeroInList","event","preventDefault","file","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","buffer","Buffer","result","add","err","hash","set","from","then","res","get","call","ipfsHash","provPool","getProviderPool","length","Pool","type","listProviders","proList","listRequests","pendList","Text","List","i","j"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport TaskContract from \"./contracts/TaskContract.json\";\nimport getWeb3 from \"./utils/getWeb3\";\nimport truffleContract from \"truffle-contract\";\nimport ipfs from './ipfs';\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { \n    web3: null, \n    accounts: null, \n    myContract: null ,\n    debug: false,\n    providerCount : 0,\n    pendingCount : 0,\n    validatingCount :0,\n    providingCount:0\n\n    \n  };\n\n\n  constructor(props){\n    super(props)\n    this.state = {};\n    this.captureFile = this.captureFile.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.showPools = this.showPools.bind(this);\n    this.ListoutPool = this.ListoutPool.bind(this);\n    this.DisplayNonZeroInList = this.DisplayNonZeroInList.bind(this);\n    this.setState = this.setState.bind(this).bind(this)\n    \n  }\n\n\n  componentWillMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n      //console.log(web3);\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n      //console.log(accounts);\n      // Get the contract instance.\n      const Contract = truffleContract(TaskContract);\n      Contract.setProvider(web3.currentProvider);\n      const instance = await Contract.deployed();\n      //console.log(instance);\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, myContract: instance })\n        console.log(\"contract setted up!\");\n        this.showPools();\n    }\n    catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`\n      );\n      console.log(error);\n    }\n  };\n\n  // runExample = async () => {\n  //   const { accounts, contract } = this.state;\n\n  //   // Stores a given value, 5 by default.\n  //   await contract.set(1721241, { from: accounts[2] });\n\n  //   // Get the value from the contract to prove it worked.\n  //   const response = await contract.get();\n\n  //   // Update state with the result.\n  //   this.setState({ storageValue: response.toNumber() });\n  // };\n\n  //file readers: https://developer.mozilla.org/en-US/docs/Web/API/FileReader\n\n\n  captureFile(event){\n    console.log(\"capture file\");\n    event.preventDefault()\n    const file = event.target.files[0]\n    const reader = new window.FileReader()\n    reader.readAsArrayBuffer(file)\n    reader.onloadend = () =>{\n      this.setState({buffer: Buffer(reader.result)})\n      console.log(\"buffer\", this.state.buffer);\n    }\n  }\n\n  onSubmit(event){\n    console.log(\"submitted!\")\n    event.preventDefault();\n    ipfs.files.add(this.state.buffer, (err, result)=>{\n      if(err){\n        console.log(\"Error!\", err);\n        return\n      }\n      else{\n        \n        //this.setState({ipfsHash: result[0].hash})\n        console.log(\"ipfsHash returned\", result[0].hash)\n        return this.state.myContract.set(result[0].hash, {from: this.state.accounts[0]}).then((res)=>{\n          console.log(\"Send\", res);\n          return this.state.myContract.get.call({from: this.state.accounts[0]}).then((ipfsHash)=>{\n            console.log(\"Fetched\", ipfsHash);\n            this.setState({ipfsHash})\n            \n          })\n        })\n      }\n    })\n    \n  }  \n\n  showPools(){\t\t//optional [--list] \n    //NOTE: the following 'return' is important, it actually return the promise object\n    //this avoid the issue of unhandled promise.\n    let provPool = this.state.myContract.getProviderPool.call(); \n    \n    \n      console.log(\"=======================================================\");\n      console.log(\"Active provider pool: Total = \", provPool.length);\n      console.log(provPool);\n      this.setState({providerCount: provPool.length})\n      return provPool;\n    /* }).then(function(provPool){\n       if(provPool.length >0) return this.ListoutPool(provPool,'provider');\n    //}).then(function(){\n    })\n    this.state.myContract.getPendingPool.call().then(function(reqPool){\n        console.log(\"=======================================================\")\n        console.log(\"Pending pool:  Total = \", reqPool.length);\n        console.log(reqPool);\n        this.setState({pendingCount: reqPool.length})\n        return reqPool;\n    //  })\n    }).then(function(reqPool){\n       if(reqPool.length>0) return this.ListoutPool(reqPool, 'request');\n    })//.then(function(){\n      this.state.myContract.getProvidingPool.call().then(function(providingPool){\n        console.log(\"=======================================================\")\n        console.log(\"Providing pool:  Total = \", providingPool.length);\n        console.log(providingPool);\n        this.setState({providingCount: providingPool.length})\n        return providingPool;\n      //})\n    }).then(function(providingPool){\n      if(providingPool.length>0) return this.ListoutPool(providingPool, 'request');\n    })//.then(function(){\n      this.state.myContract.getValidatingPool.call().then(function(valiPool){\n        console.log(\"=======================================================\")\n        console.log(\"Validating pool:  Total = \", valiPool.length);\n        console.log(valiPool);\n        this.setState({validatingCount: valiPool.length})\n        return valiPool;\n        //})\n    }).catch(console.log)\n    // .then(function(valiPool){\n    //   if(valiPool.length>0) return this.ListoutPool(valiPool, 'request');\n    // })\n    */\n  }\n\n  ListoutPool(Pool,type){\t\t//--list [--debug]\n    //console.log(\"List out Pool\")\n    if (type === 'provider'){\n      return this.state.myContract.listProviders.call(Pool)\n      .then(function(proList){\n        console.log(\"-----------------------------------------------------\")\n        this.DisplayNonZeroInList(proList,'provider');\n      })\n    }\n    else if (type === 'request'){\n      return this.state.myContract.listRequests.call(Pool)\n      .then(function(pendList){\n        console.log(\"-----------------------------------------------------\")\n        this.DisplayNonZeroInList(pendList,'request');\n      })\n    }\n    else throw new Text(\"Not supported type!\")\n  }\n\n  DisplayNonZeroInList(List, type){\n    if(type === 'request')\n      for(var i = 0;i < List.length;i++){\n        if(List[i]['addr'] !== 0){\n          if(this.state.debug){\n            console.log(List[i]);\n            console.log(\"-----------------------------------------------------\")\n          } else {\n            //simple print:\n            console.log(\"reqID = \", List[i]['reqID']);\n            console.log(\"addr = \", List[i]['addr']);\n            console.log(\"provider = \", List[i]['provider']);\n            console.log(\"status = \",  List[i]['status']);\n            console.log(\"-----------------------------------------------------\")\t\t\t\t\t\t\t\n          }\n        }\n      }\n    else if (type === 'provider')\n      for (var j = 0;j < List.length ;j++){\n        if(List[j]['addr'] !== 0){\n          if(this.state.debug){\n            console.log(List[j]);\n            console.log(\"-----------------------------------------------------\")\n          } else{\n            console.log(\"provD = \", List[j]['provID']);\n            console.log(\"addr = \", List[j]['addr']);\n            console.log(\"available = \", List[j]['available']);\n            console.log(\"-----------------------------------------------------\")\n          }\n        }\n      }\n    else throw new Text('Not supported type for display')\t\n  }\n\n  //components of react: https://reactjs.org/docs/forms.html\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Your Mode: User</h1>\n        <p>You can change mode later.</p>\n        <img src={`https://ipfs.infura.io/ipfs/${this.state.ipfsHash}`} alt=\"\" />\n        <h2>Upload Task Script</h2>\n        <form  onSubmit = {this.onSubmit}>\n          <input type = 'file' onChange = {this.captureFile}></input>\n          <input type = 'submit' value = \"Click\"></input>\n        </form>\n        \n        <p>\n          Your account: {this.state.accounts[0]}\n        </p>\n        <button onClick={this.showPools}>\n          Refresh\n        </button>\n        <div>\n          <p>Active Provider = {this.state.providerCount}</p>\n          <p>PendingPool ={this.state.pendingCount}</p> \n          <p>Providing Pool = {this.state.providingCount}</p>\n          <p>Validating Pool = {this.state.validatingCount}</p>\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}