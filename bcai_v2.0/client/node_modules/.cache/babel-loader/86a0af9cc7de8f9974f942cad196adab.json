{"ast":null,"code":"import _regeneratorRuntime from \"/home/taurus/blockchain/gitLab/ipfsLab/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/taurus/blockchain/gitLab/ipfsLab/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/taurus/blockchain/gitLab/ipfsLab/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/taurus/blockchain/gitLab/ipfsLab/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/taurus/blockchain/gitLab/ipfsLab/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/taurus/blockchain/gitLab/ipfsLab/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/taurus/blockchain/gitLab/ipfsLab/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/taurus/blockchain/gitLab/ipfsLab/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/taurus/blockchain/gitLab/ipfsLab/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport getWeb3 from \"./utils/getWeb3\";\nimport truffleContract from \"truffle-contract\";\nimport ipfs from './ipfs';\nimport \"./App.css\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      storageValue: 0,\n      web3: null,\n      accounts: null,\n      contract: null\n    };\n    _this.componentDidMount =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var web3, accounts, Contract, instance;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return getWeb3();\n\n            case 3:\n              web3 = _context.sent;\n              _context.next = 6;\n              return web3.eth.getAccounts();\n\n            case 6:\n              accounts = _context.sent;\n              //console.log(accounts);\n              // Get the contract instance.\n              Contract = truffleContract(SimpleStorageContract);\n              Contract.setProvider(web3.currentProvider);\n              _context.next = 11;\n              return Contract.deployed();\n\n            case 11:\n              instance = _context.sent;\n\n              //console.log(instance);\n              // Set web3, accounts, and contract to the state, and then proceed with an\n              // example of interacting with the contract's methods.\n              _this.setState({\n                web3: web3,\n                accounts: accounts,\n                contract: instance\n              }, _this.runExample);\n\n              return _context.abrupt(\"return\", instance.get.call(accounts[0]).then(function (ipfsHash) {\n                return _this.setState({\n                  ipfsHash: ipfsHash\n                });\n              }));\n\n            case 16:\n              _context.prev = 16;\n              _context.t0 = _context[\"catch\"](0);\n              // Catch any errors for any of the above operations.\n              alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n              console.log(_context.t0);\n\n            case 20:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[0, 16]]);\n    }));\n    _this.runExample =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var _this$state, accounts, contract, response;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _this$state = _this.state, accounts = _this$state.accounts, contract = _this$state.contract; // Stores a given value, 5 by default.\n\n              _context2.next = 3;\n              return contract.set(1721241, {\n                from: accounts[2]\n              });\n\n            case 3:\n              _context2.next = 5;\n              return contract.get();\n\n            case 5:\n              response = _context2.sent;\n\n              // Update state with the result.\n              _this.setState({\n                storageValue: response.toNumber()\n              });\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n    _this.state = {\n      ipfsHash: '',\n      storageValue: 0,\n      web3: null,\n      buffer: null //this.componentDidMount();\n\n    };\n    _this.captureFile = _this.captureFile.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onSubmit = _this.onSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"captureFile\",\n    //file readers: https://developer.mozilla.org/en-US/docs/Web/API/FileReader\n    value: function captureFile(event) {\n      var _this2 = this;\n\n      console.log(\"capture file\");\n      event.preventDefault();\n      var file = event.target.files[0];\n      var reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = function () {\n        _this2.setState({\n          buffer: Buffer(reader.result)\n        });\n\n        console.log(\"buffer\", _this2.state.buffer);\n      };\n    }\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(event) {\n      var _this3 = this;\n\n      console.log(\"submitted!\");\n      event.preventDefault();\n      ipfs.files.add(this.state.buffer, function (err, result) {\n        if (err) {\n          console.log(\"Error!\", err);\n          return;\n        } else {\n          //this.setState({ipfsHash: result[0].hash})\n          console.log(\"ipfsHash returned\", _this3.state.ipfsHash);\n          return _this3.state.contract.set(_this3.state.ipfsHash, {\n            from: _this3.state.accounts[0]\n          }).then(function (res) {\n            console.log(\"Send\", res);\n            return _this3.state.contract.get.call().then(function (ipfsHash) {\n              _this3.setState({\n                ipfsHash: ipfsHash\n              });\n\n              console.log(\"Fetched\", ipfsHash);\n            });\n          });\n        }\n      });\n    } //components of react: https://reactjs.org/docs/forms.html\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (!this.state.web3) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        }, \"Loading Web3, accounts, and contract...\");\n      }\n\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, \"Your Image\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, \"Your image is saved on IPFS and Ethereum blockchain\"), React.createElement(\"img\", {\n        src: \"https://ipfs.infura.io/ipfs/\".concat(this.state.ipfsHash),\n        alt: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, \"Upload Image\"), React.createElement(\"form\", {\n        onSubmit: this.onSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"file\",\n        onChange: this.captureFile,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"Click\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      })), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, \"If your contracts compiled and migrated successfully, below will show a stored value of 5 (by default).\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, \"Try changing the value stored on \", React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, \"line 40\"), \" of App.js.\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, \"The stored value is: \", this.state.storageValue));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/taurus/blockchain/gitLab/ipfsLab/client/src/App.js"],"names":["React","Component","SimpleStorageContract","getWeb3","truffleContract","ipfs","App","props","state","storageValue","web3","accounts","contract","componentDidMount","eth","getAccounts","Contract","setProvider","currentProvider","deployed","instance","setState","runExample","get","call","then","ipfsHash","alert","console","log","set","from","response","toNumber","buffer","captureFile","bind","onSubmit","event","preventDefault","file","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","Buffer","result","add","err","res"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport getWeb3 from \"./utils/getWeb3\";\nimport truffleContract from \"truffle-contract\";\nimport ipfs from './ipfs';\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { storageValue: 0, web3: null, accounts: null, contract: null };\n  constructor(props){\n    super(props)\n    \n    this.state = {\n      ipfsHash: '',\n      storageValue: 0, \n      web3: null, \n      buffer: null}\n    \n      //this.componentDidMount();\n    this.captureFile = this.captureFile.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n      //console.log(web3);\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n      //console.log(accounts);\n      // Get the contract instance.\n      const Contract = truffleContract(SimpleStorageContract);\n      Contract.setProvider(web3.currentProvider);\n      const instance = await Contract.deployed();\n      //console.log(instance);\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance }, this.runExample);\n      return instance.get.call(accounts[0]).then((ipfsHash)=>{\n        return this.setState({ipfsHash})\n      })\n    }\n     \n    catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`\n      );\n      console.log(error);\n    }\n  };\n\n  runExample = async () => {\n    const { accounts, contract } = this.state;\n\n    // Stores a given value, 5 by default.\n    await contract.set(1721241, { from: accounts[2] });\n\n    // Get the value from the contract to prove it worked.\n    const response = await contract.get();\n\n    // Update state with the result.\n    this.setState({ storageValue: response.toNumber() });\n  };\n\n  //file readers: https://developer.mozilla.org/en-US/docs/Web/API/FileReader\n\n\n  captureFile(event){\n    console.log(\"capture file\");\n    event.preventDefault()\n    const file = event.target.files[0]\n    const reader = new window.FileReader()\n    reader.readAsArrayBuffer(file)\n    reader.onloadend = () =>{\n      this.setState({buffer: Buffer(reader.result)})\n      console.log(\"buffer\", this.state.buffer);\n    }\n  }\n\n  onSubmit(event){\n    console.log(\"submitted!\")\n    event.preventDefault();\n    ipfs.files.add(this.state.buffer, (err, result)=>{\n      if(err){\n        console.log(\"Error!\", err);\n        return\n      }\n      else{\n        \n        //this.setState({ipfsHash: result[0].hash})\n        console.log(\"ipfsHash returned\", this.state.ipfsHash)\n        return this.state.contract.set(this.state.ipfsHash, {from: this.state.accounts[0]}).then((res)=>{\n          console.log(\"Send\", res);\n          return this.state.contract.get.call().then((ipfsHash)=>{\n            this.setState({ipfsHash})\n            console.log(\"Fetched\", ipfsHash);\n        })\n        })\n      }\n    })\n    \n  }  \n\n\n  //components of react: https://reactjs.org/docs/forms.html\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Your Image</h1>\n        <p>Your image is saved on IPFS and Ethereum blockchain</p>\n        <img src={`https://ipfs.infura.io/ipfs/${this.state.ipfsHash}`} alt=\"\" />\n        <h2>Upload Image</h2>\n        <form  onSubmit = {this.onSubmit}>\n          <input type = 'file' onChange = {this.captureFile}></input>\n          <input type = 'submit' value = \"Click\"></input>\n        </form>\n        \n        <p>\n          If your contracts compiled and migrated successfully, below will show\n          a stored value of 5 (by default).\n        </p>\n        <p>\n          Try changing the value stored on <strong>line 40</strong> of App.js.\n        </p>\n        <div>The stored value is: {this.state.storageValue}</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}