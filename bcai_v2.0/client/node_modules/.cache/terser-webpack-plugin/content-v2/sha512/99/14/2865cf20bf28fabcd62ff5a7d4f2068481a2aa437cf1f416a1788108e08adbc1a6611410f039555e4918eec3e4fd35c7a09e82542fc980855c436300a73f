{"map":"{\"version\":3,\"sources\":[\"/home/taurus/blockchain/gitLab/ipfsLab/client/src/utils/getWeb3.js\",\"/home/taurus/blockchain/gitLab/ipfsLab/client/src/App.js\",\"/home/taurus/blockchain/gitLab/ipfsLab/client/src/serviceWorker.js\",\"/home/taurus/blockchain/gitLab/ipfsLab/client/src/index.js\"],\"names\":[\"getWeb3\",\"Promise\",\"resolve\",\"reject\",\"window\",\"addEventListener\",\"Object\",\"asyncToGenerator\",\"regenerator_default\",\"a\",\"mark\",\"_callee\",\"web3\",\"_web\",\"provider\",\"_web2\",\"wrap\",\"_context\",\"prev\",\"next\",\"ethereum\",\"Web3\",\"enable\",\"t0\",\"console\",\"log\",\"providers\",\"HttpProvider\",\"stop\",\"this\",\"App\",\"state\",\"storageValue\",\"accounts\",\"contract\",\"componentDidMount\",\"Contract\",\"instance\",\"sent\",\"eth\",\"getAccounts\",\"truffleContract\",\"SimpleStorageContract\",\"setProvider\",\"currentProvider\",\"deployed\",\"_this\",\"setState\",\"runExample\",\"alert\",\"_callee2\",\"_this$state\",\"response\",\"_context2\",\"set\",\"from\",\"get\",\"toNumber\",\"react_default\",\"createElement\",\"className\",\"Component\",\"Boolean\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App_0\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"opSAqCeA,EAnCC,WAAA,OACd,IAAIC,QAAQ,SAACC,EAASC,GAEpBC,OAAOC,iBAAiB,OAAxBC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAgC,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAP,EAAAC,EAAAO,KAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,IAE1Bf,OAAOgB,SAFmB,CAAAH,EAAAE,KAAA,GAAA,MAAA,OAGtBP,EAAO,IAAIS,EAAAA,EAAKjB,OAAOgB,UAHDH,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAMpBf,OAAOgB,SAASE,SANI,KAAA,EAQ1BpB,EAAQU,GARkBK,EAAAE,KAAA,GAAA,MAAA,KAAA,EAAAF,EAAAC,KAAA,EAAAD,EAAAM,GAAAN,EAAA,MAAA,GAU1Bd,EAAMc,EAAAM,IAVoB,KAAA,GAAAN,EAAAE,KAAA,GAAA,MAAA,KAAA,GAcrBf,OAAOQ,MAERA,EAAOR,OAAOQ,KACpBY,QAAQC,IAAI,2BACZvB,EAAQU,KAIFE,EAAW,IAAIO,EAAAA,EAAKK,UAAUC,aAClC,yBAEIf,EAAO,IAAIS,EAAAA,EAAKP,GACtBU,QAAQC,IAAI,gDACZvB,EAAQU,IA3BoB,KAAA,GAAA,IAAA,MAAA,OAAAK,EAAAW,SAAAjB,EAAAkB,KAAA,CAAA,CAAA,EAAA,8BCiErBC,qNA9DbC,MAAQ,CAAEC,aAAc,EAAGpB,KAAM,KAAMqB,SAAU,KAAMC,SAAU,QAEjEC,uCAAoB,SAAAxB,IAAA,IAAAC,EAAAqB,EAAAG,EAAAC,EAAA,OAAA7B,EAAAC,EAAAO,KAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAGGnB,IAHH,KAAA,EAAA,OAGVY,EAHUK,EAAAqB,KAAArB,EAAAE,KAAA,EAMOP,EAAK2B,IAAIC,cANhB,KAAA,EAAA,OAMVP,EANUhB,EAAAqB,MASVF,EAAWK,GAAAA,CAAgBC,IACxBC,YAAY/B,EAAKgC,iBAVV3B,EAAAE,KAAA,GAWOiB,EAASS,WAXhB,KAAA,GAWVR,EAXUpB,EAAAqB,KAehBQ,EAAKC,SAAS,CAAEnC,KAAAA,EAAMqB,SAAAA,EAAUC,SAAUG,GAAYS,EAAKE,YAf3C/B,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAM,GAAAN,EAAA,MAAA,GAkBhBgC,MAAK,0EAGLzB,QAAQC,IAARR,EAAAM,IArBgB,KAAA,GAAA,IAAA,MAAA,OAAAN,EAAAW,SAAAjB,EAAAkB,KAAA,CAAA,CAAA,EAAA,WAyBpBmB,gCAAa,SAAAE,IAAA,IAAAC,EAAAlB,EAAAC,EAAAkB,EAAA,OAAA5C,EAAAC,EAAAO,KAAA,SAAAqC,GAAA,OAAA,OAAAA,EAAAnC,KAAAmC,EAAAlC,MAAA,KAAA,EAAA,OAAAgC,EACoBL,EAAKf,MAA5BE,EADGkB,EACHlB,SAAUC,EADPiB,EACOjB,SADPmB,EAAAlC,KAAA,EAILe,EAASoB,IAAI,EAAG,CAAEC,KAAMtB,EAAS,KAJ5B,KAAA,EAAA,OAAAoB,EAAAlC,KAAA,EAOYe,EAASsB,MAPrB,KAAA,EAOLJ,EAPKC,EAAAf,KAUXQ,EAAKC,SAAS,CAAEf,aAAcoB,EAASK,aAV5B,KAAA,EAAA,IAAA,MAAA,OAAAJ,EAAAzB,SAAAsB,EAAArB,iFAcX,OAAKA,KAAKE,MAAMnB,KAId8C,EAAAjD,EAAAkD,cAAA,MAAA,CAAKC,UAAU,OACbF,EAAAjD,EAAAkD,cAAA,KAAA,KAAA,eACAD,EAAAjD,EAAAkD,cAAA,IAAA,KAAA,4CACAD,EAAAjD,EAAAkD,cAAA,KAAA,KAAA,0BACAD,EAAAjD,EAAAkD,cAAA,IAAA,KAAA,2GAIAD,EAAAjD,EAAAkD,cAAA,IAAA,KAAA,oCACmCD,EAAAjD,EAAAkD,cAAA,SAAA,KAAA,WADnC,eAGAD,EAAAjD,EAAAkD,cAAA,MAAA,KAAA,wBAA2B9B,KAAKE,MAAMC,eAdjC0B,EAAAjD,EAAAkD,cAAA,MAAA,KAAA,kDA3CKE,EAAAA,YCKEC,QACW,cAA7B1D,OAAO2D,SAASC,UAEe,UAA7B5D,OAAO2D,SAASC,UAEhB5D,OAAO2D,SAASC,SAASC,MACvB,2DCZNC,EAAAA,EAASC,OAAOT,EAAAjD,EAAAkD,cAACS,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC\",\"sourcesContent\":[\"import Web3 from \\\"web3\\\";\\n\\nconst getWeb3 = () =>\\n  new Promise((resolve, reject) => {\\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\\n    window.addEventListener(\\\"load\\\", async () => {\\n      // Modern dapp browsers...\\n      if (window.ethereum) {\\n        const web3 = new Web3(window.ethereum);\\n        try {\\n          // Request account access if needed\\n          await window.ethereum.enable();\\n          // Acccounts now exposed\\n          resolve(web3);\\n        } catch (error) {\\n          reject(error);\\n        }\\n      }\\n      // Legacy dapp browsers...\\n      else if (window.web3) {\\n        // Use Mist/MetaMask's provider.\\n        const web3 = window.web3;\\n        console.log(\\\"Injected web3 detected.\\\");\\n        resolve(web3);\\n      }\\n      // Fallback to localhost; use dev console port by default...\\n      else {\\n        const provider = new Web3.providers.HttpProvider(\\n          \\\"http://127.0.0.1:9545\\\"\\n        );\\n        const web3 = new Web3(provider);\\n        console.log(\\\"No web3 instance injected, using Local web3.\\\");\\n        resolve(web3);\\n      }\\n    });\\n  });\\n\\nexport default getWeb3;\\n\",\"import React, { Component } from \\\"react\\\";\\nimport SimpleStorageContract from \\\"./contracts/SimpleStorage.json\\\";\\nimport getWeb3 from \\\"./utils/getWeb3\\\";\\nimport truffleContract from \\\"truffle-contract\\\";\\n\\nimport \\\"./App.css\\\";\\n\\nclass App extends Component {\\n  state = { storageValue: 0, web3: null, accounts: null, contract: null };\\n\\n  componentDidMount = async () => {\\n    try {\\n      // Get network provider and web3 instance.\\n      const web3 = await getWeb3();\\n\\n      // Use web3 to get the user's accounts.\\n      const accounts = await web3.eth.getAccounts();\\n\\n      // Get the contract instance.\\n      const Contract = truffleContract(SimpleStorageContract);\\n      Contract.setProvider(web3.currentProvider);\\n      const instance = await Contract.deployed();\\n\\n      // Set web3, accounts, and contract to the state, and then proceed with an\\n      // example of interacting with the contract's methods.\\n      this.setState({ web3, accounts, contract: instance }, this.runExample);\\n    } catch (error) {\\n      // Catch any errors for any of the above operations.\\n      alert(\\n        `Failed to load web3, accounts, or contract. Check console for details.`\\n      );\\n      console.log(error);\\n    }\\n  };\\n\\n  runExample = async () => {\\n    const { accounts, contract } = this.state;\\n\\n    // Stores a given value, 5 by default.\\n    await contract.set(5, { from: accounts[0] });\\n\\n    // Get the value from the contract to prove it worked.\\n    const response = await contract.get();\\n\\n    // Update state with the result.\\n    this.setState({ storageValue: response.toNumber() });\\n  };\\n\\n  render() {\\n    if (!this.state.web3) {\\n      return <div>Loading Web3, accounts, and contract...</div>;\\n    }\\n    return (\\n      <div className=\\\"App\\\">\\n        <h1>Good to Go!</h1>\\n        <p>Your Truffle Box is installed and ready.</p>\\n        <h2>Smart Contract Example</h2>\\n        <p>\\n          If your contracts compiled and migrated successfully, below will show\\n          a stored value of 5 (by default).\\n        </p>\\n        <p>\\n          Try changing the value stored on <strong>line 40</strong> of App.js.\\n        </p>\\n        <div>The stored value is: {this.state.storageValue}</div>\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default App;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read http://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: http://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{176:function(e){e.exports={contractName:\"SimpleStorage\",abi:[{constant:!1,inputs:[{name:\"x\",type:\"uint256\"}],name:\"set\",outputs:[],payable:!1,stateMutability:\"nonpayable\",type:\"function\"},{constant:!0,inputs:[],name:\"get\",outputs:[{name:\"\",type:\"uint256\"}],payable:!1,stateMutability:\"view\",type:\"function\"}],bytecode:\"0x608060405234801561001057600080fd5b5060df8061001f6000396000f3006080604052600436106049576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806360fe47b114604e5780636d4ce63c146078575b600080fd5b348015605957600080fd5b5060766004803603810190808035906020019092919050505060a0565b005b348015608357600080fd5b50608a60aa565b6040518082815260200191505060405180910390f35b8060008190555050565b600080549050905600a165627a7a723058207689fd2d950140e482972e6acbfb3024b55a226bf1a7a29e0b68c81fd64f29bc0029\",deployedBytecode:\"0x6080604052600436106049576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806360fe47b114604e5780636d4ce63c146078575b600080fd5b348015605957600080fd5b5060766004803603810190808035906020019092919050505060a0565b005b348015608357600080fd5b50608a60aa565b6040518082815260200191505060405180910390f35b8060008190555050565b600080549050905600a165627a7a723058207689fd2d950140e482972e6acbfb3024b55a226bf1a7a29e0b68c81fd64f29bc0029\",sourceMap:\"26:176:1:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;26:176:1;;;;;;;\",deployedSourceMap:\"26:176:1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;73:53;;8:9:-1;5:2;;;30:1;27;20:12;5:2;73:53:1;;;;;;;;;;;;;;;;;;;;;;;;;;130:70;;8:9:-1;5:2;;;30:1;27;20:12;5:2;130:70:1;;;;;;;;;;;;;;;;;;;;;;;73:53;120:1;107:10;:14;;;;73:53;:::o;130:70::-;166:4;185:10;;178:17;;130:70;:::o\",source:\"pragma solidity ^0.4.24;\\n\\ncontract SimpleStorage {\\n  uint storedData;\\n\\n  function set(uint x) public {\\n    storedData = x;\\n  }\\n\\n  function get() public view returns (uint) {\\n    return storedData;\\n  }\\n}\\n\",sourcePath:\"/home/taurus/blockchain/gitLab/ipfsLab/contracts/SimpleStorage.sol\",ast:{absolutePath:\"/home/taurus/blockchain/gitLab/ipfsLab/contracts/SimpleStorage.sol\",exportedSymbols:{SimpleStorage:[79]},id:80,nodeType:\"SourceUnit\",nodes:[{id:58,literals:[\"solidity\",\"^\",\"0.4\",\".24\"],nodeType:\"PragmaDirective\",src:\"0:24:1\"},{baseContracts:[],contractDependencies:[],contractKind:\"contract\",documentation:null,fullyImplemented:!0,id:79,linearizedBaseContracts:[79],name:\"SimpleStorage\",nodeType:\"ContractDefinition\",nodes:[{constant:!1,id:60,name:\"storedData\",nodeType:\"VariableDeclaration\",scope:79,src:\"53:15:1\",stateVariable:!0,storageLocation:\"default\",typeDescriptions:{typeIdentifier:\"t_uint256\",typeString:\"uint256\"},typeName:{id:59,name:\"uint\",nodeType:\"ElementaryTypeName\",src:\"53:4:1\",typeDescriptions:{typeIdentifier:\"t_uint256\",typeString:\"uint256\"}},value:null,visibility:\"internal\"},{body:{id:69,nodeType:\"Block\",src:\"101:25:1\",statements:[{expression:{argumentTypes:null,id:67,isConstant:!1,isLValue:!1,isPure:!1,lValueRequested:!1,leftHandSide:{argumentTypes:null,id:65,name:\"storedData\",nodeType:\"Identifier\",overloadedDeclarations:[],referencedDeclaration:60,src:\"107:10:1\",typeDescriptions:{typeIdentifier:\"t_uint256\",typeString:\"uint256\"}},nodeType:\"Assignment\",operator:\"=\",rightHandSide:{argumentTypes:null,id:66,name:\"x\",nodeType:\"Identifier\",overloadedDeclarations:[],referencedDeclaration:62,src:\"120:1:1\",typeDescriptions:{typeIdentifier:\"t_uint256\",typeString:\"uint256\"}},src:\"107:14:1\",typeDescriptions:{typeIdentifier:\"t_uint256\",typeString:\"uint256\"}},id:68,nodeType:\"ExpressionStatement\",src:\"107:14:1\"}]},documentation:null,id:70,implemented:!0,isConstructor:!1,isDeclaredConst:!1,modifiers:[],name:\"set\",nodeType:\"FunctionDefinition\",parameters:{id:63,nodeType:\"ParameterList\",parameters:[{constant:!1,id:62,name:\"x\",nodeType:\"VariableDeclaration\",scope:70,src:\"86:6:1\",stateVariable:!1,storageLocation:\"default\",typeDescriptions:{typeIdentifier:\"t_uint256\",typeString:\"uint256\"},typeName:{id:61,name:\"uint\",nodeType:\"ElementaryTypeName\",src:\"86:4:1\",typeDescriptions:{typeIdentifier:\"t_uint256\",typeString:\"uint256\"}},value:null,visibility:\"internal\"}],src:\"85:8:1\"},payable:!1,returnParameters:{id:64,nodeType:\"ParameterList\",parameters:[],src:\"101:0:1\"},scope:79,src:\"73:53:1\",stateMutability:\"nonpayable\",superFunction:null,visibility:\"public\"},{body:{id:77,nodeType:\"Block\",src:\"172:28:1\",statements:[{expression:{argumentTypes:null,id:75,name:\"storedData\",nodeType:\"Identifier\",overloadedDeclarations:[],referencedDeclaration:60,src:\"185:10:1\",typeDescriptions:{typeIdentifier:\"t_uint256\",typeString:\"uint256\"}},functionReturnParameters:74,id:76,nodeType:\"Return\",src:\"178:17:1\"}]},documentation:null,id:78,implemented:!0,isConstructor:!1,isDeclaredConst:!0,modifiers:[],name:\"get\",nodeType:\"FunctionDefinition\",parameters:{id:71,nodeType:\"ParameterList\",parameters:[],src:\"142:2:1\"},payable:!1,returnParameters:{id:74,nodeType:\"ParameterList\",parameters:[{constant:!1,id:73,name:\"\",nodeType:\"VariableDeclaration\",scope:78,src:\"166:4:1\",stateVariable:!1,storageLocation:\"default\",typeDescriptions:{typeIdentifier:\"t_uint256\",typeString:\"uint256\"},typeName:{id:72,name:\"uint\",nodeType:\"ElementaryTypeName\",src:\"166:4:1\",typeDescriptions:{typeIdentifier:\"t_uint256\",typeString:\"uint256\"}},value:null,visibility:\"internal\"}],src:\"165:6:1\"},scope:79,src:\"130:70:1\",stateMutability:\"view\",superFunction:null,visibility:\"public\"}],scope:80,src:\"26:176:1\"}],src:\"0:203:1\"},legacyAST:{absolutePath:\"/home/taurus/blockchain/gitLab/ipfsLab/contracts/SimpleStorage.sol\",exportedSymbols:{SimpleStorage:[79]},id:80,nodeType:\"SourceUnit\",nodes:[{id:58,literals:[\"solidity\",\"^\",\"0.4\",\".24\"],nodeType:\"PragmaDirective\",src:\"0:24:1\"},{baseContracts:[],contractDependencies:[],contractKind:\"contract\",documentation:null,fullyImplemented:!0,id:79,linearizedBaseContracts:[79],name:\"SimpleStorage\",nodeType:\"ContractDefinition\",nodes:[{constant:!1,id:60,name:\"storedData\",nodeType:\"VariableDeclaration\",scope:79,src:\"53:15:1\",stateVariable:!0,storageLocation:\"default\",typeDescriptions:{typeIdentifier:\"t_uint256\",typeString:\"uint256\"},typeName:{id:59,name:\"uint\",nodeType:\"ElementaryTypeName\",src:\"53:4:1\",typeDescriptions:{typeIdentifier:\"t_uint256\",typeString:\"uint256\"}},value:null,visibility:\"internal\"},{body:{id:69,nodeType:\"Block\",src:\"101:25:1\",statements:[{expression:{argumentTypes:null,id:67,isConstant:!1,isLValue:!1,isPure:!1,lValueRequested:!1,leftHandSide:{argumentTypes:null,id:65,name:\"storedData\",nodeType:\"Identifier\",overloadedDeclarations:[],referencedDeclaration:60,src:\"107:10:1\",typeDescriptions:{typeIdentifier:\"t_uint256\",typeString:\"uint256\"}},nodeType:\"Assignment\",operator:\"=\",rightHandSide:{argumentTypes:null,id:66,name:\"x\",nodeType:\"Identifier\",overloadedDeclarations:[],referencedDeclaration:62,src:\"120:1:1\",typeDescriptions:{typeIdentifier:\"t_uint256\",typeString:\"uint256\"}},src:\"107:14:1\",typeDescriptions:{typeIdentifier:\"t_uint256\",typeString:\"uint256\"}},id:68,nodeType:\"ExpressionStatement\",src:\"107:14:1\"}]},documentation:null,id:70,implemented:!0,isConstructor:!1,isDeclaredConst:!1,modifiers:[],name:\"set\",nodeType:\"FunctionDefinition\",parameters:{id:63,nodeType:\"ParameterList\",parameters:[{constant:!1,id:62,name:\"x\",nodeType:\"VariableDeclaration\",scope:70,src:\"86:6:1\",stateVariable:!1,storageLocation:\"default\",typeDescriptions:{typeIdentifier:\"t_uint256\",typeString:\"uint256\"},typeName:{id:61,name:\"uint\",nodeType:\"ElementaryTypeName\",src:\"86:4:1\",typeDescriptions:{typeIdentifier:\"t_uint256\",typeString:\"uint256\"}},value:null,visibility:\"internal\"}],src:\"85:8:1\"},payable:!1,returnParameters:{id:64,nodeType:\"ParameterList\",parameters:[],src:\"101:0:1\"},scope:79,src:\"73:53:1\",stateMutability:\"nonpayable\",superFunction:null,visibility:\"public\"},{body:{id:77,nodeType:\"Block\",src:\"172:28:1\",statements:[{expression:{argumentTypes:null,id:75,name:\"storedData\",nodeType:\"Identifier\",overloadedDeclarations:[],referencedDeclaration:60,src:\"185:10:1\",typeDescriptions:{typeIdentifier:\"t_uint256\",typeString:\"uint256\"}},functionReturnParameters:74,id:76,nodeType:\"Return\",src:\"178:17:1\"}]},documentation:null,id:78,implemented:!0,isConstructor:!1,isDeclaredConst:!0,modifiers:[],name:\"get\",nodeType:\"FunctionDefinition\",parameters:{id:71,nodeType:\"ParameterList\",parameters:[],src:\"142:2:1\"},payable:!1,returnParameters:{id:74,nodeType:\"ParameterList\",parameters:[{constant:!1,id:73,name:\"\",nodeType:\"VariableDeclaration\",scope:78,src:\"166:4:1\",stateVariable:!1,storageLocation:\"default\",typeDescriptions:{typeIdentifier:\"t_uint256\",typeString:\"uint256\"},typeName:{id:72,name:\"uint\",nodeType:\"ElementaryTypeName\",src:\"166:4:1\",typeDescriptions:{typeIdentifier:\"t_uint256\",typeString:\"uint256\"}},value:null,visibility:\"internal\"}],src:\"165:6:1\"},scope:79,src:\"130:70:1\",stateMutability:\"view\",superFunction:null,visibility:\"public\"}],scope:80,src:\"26:176:1\"}],src:\"0:203:1\"},compiler:{name:\"solc\",version:\"0.4.24+commit.e67f0147.Emscripten.clang\"},networks:{},schemaVersion:\"2.0.1\",updatedAt:\"2018-12-12T20:07:54.568Z\"}},180:function(e,t,n){e.exports=n(465)},185:function(e,t,n){},215:function(e,t){},217:function(e,t){},258:function(e,t){},304:function(e,t){},463:function(e,t,n){},465:function(e,t,n){\"use strict\";n.r(t);var a=n(11),i=n.n(a),r=n(172),o=n.n(r),s=(n(185),n(16)),c=n.n(s),l=n(41),d=n(173),p=n(174),u=n(178),y=n(175),m=n(179),f=n(176),b=n(61),g=n.n(b),T=function(){return new Promise(function(e,t){window.addEventListener(\"load\",Object(l.a)(c.a.mark(function n(){var a,i,r,o;return c.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:if(!window.ethereum){n.next=13;break}return a=new g.a(window.ethereum),n.prev=2,n.next=5,window.ethereum.enable();case 5:e(a),n.next=11;break;case 8:n.prev=8,n.t0=n.catch(2),t(n.t0);case 11:n.next=14;break;case 13:window.web3?(i=window.web3,console.log(\"Injected web3 detected.\"),e(i)):(r=new g.a.providers.HttpProvider(\"http://127.0.0.1:9545\"),o=new g.a(r),console.log(\"No web3 instance injected, using Local web3.\"),e(o));case 14:case\"end\":return n.stop()}},n,this,[[2,8]])})))})},D=n(177),v=n.n(D),S=(n(463),function(e){function t(){var e,n;Object(d.a)(this,t);for(var a=arguments.length,i=new Array(a),r=0;r<a;r++)i[r]=arguments[r];return(n=Object(u.a)(this,(e=Object(y.a)(t)).call.apply(e,[this].concat(i)))).state={storageValue:0,web3:null,accounts:null,contract:null},n.componentDidMount=Object(l.a)(c.a.mark(function e(){var t,a,i,r;return c.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,T();case 3:return t=e.sent,e.next=6,t.eth.getAccounts();case 6:return a=e.sent,(i=v()(f)).setProvider(t.currentProvider),e.next=11,i.deployed();case 11:r=e.sent,n.setState({web3:t,accounts:a,contract:r},n.runExample),e.next=19;break;case 15:e.prev=15,e.t0=e.catch(0),alert(\"Failed to load web3, accounts, or contract. Check console for details.\"),console.log(e.t0);case 19:case\"end\":return e.stop()}},e,this,[[0,15]])})),n.runExample=Object(l.a)(c.a.mark(function e(){var t,a,i,r;return c.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return t=n.state,a=t.accounts,i=t.contract,e.next=3,i.set(5,{from:a[0]});case 3:return e.next=5,i.get();case 5:r=e.sent,n.setState({storageValue:r.toNumber()});case 7:case\"end\":return e.stop()}},e,this)})),n}return Object(m.a)(t,e),Object(p.a)(t,[{key:\"render\",value:function(){return this.state.web3?i.a.createElement(\"div\",{className:\"App\"},i.a.createElement(\"h1\",null,\"Good to Go!\"),i.a.createElement(\"p\",null,\"Your Truffle Box is installed and ready.\"),i.a.createElement(\"h2\",null,\"Smart Contract Example\"),i.a.createElement(\"p\",null,\"If your contracts compiled and migrated successfully, below will show a stored value of 5 (by default).\"),i.a.createElement(\"p\",null,\"Try changing the value stored on \",i.a.createElement(\"strong\",null,\"line 40\"),\" of App.js.\"),i.a.createElement(\"div\",null,\"The stored value is: \",this.state.storageValue)):i.a.createElement(\"div\",null,\"Loading Web3, accounts, and contract...\")}}]),t}(a.Component));Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));o.a.render(i.a.createElement(S,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[180,2,1]]]);","extractedComments":[]}